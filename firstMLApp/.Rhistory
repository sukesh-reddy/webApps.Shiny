})
}
server <- function(input,output) {
output$distplot <- renderPlot({
x<-airquality$Ozone
x<-na.omit(x)
bins<- seq(min(x),max(x),length.out=input$bins+1)
hist(x,breaks=bins,col='#75AADB',border='black',
xlab='Ozone Level',
main='Histogram of Ozone Level')
})
}
shinyApp(ui=ui,server=server)
x<-airquality$Ozone
x<-na.omit(x)
bins<- seq(min(x),max(x),length.out=input$bins+1)
server <- function(input,output) {
output$distplot <- renderPlot({
x<-airquality$Ozone
x<-na.omit(x)
bins<- seq(min(x),max(x),length.out=input$bins+1)
hist(x,breaks=bins,col='#75AADB',border='black',
xlab='Ozone Level',
main='Histogram of Ozone Level')
})
}
output$distplot <- renderPlot({
x<-airquality$Ozone
x<-na.omit(x)
bins<- seq(min(x),max(x),length.out=input$bins+1)
hist(x,breaks=bins,col='#75AADB',border='black',
xlab='Ozone Level',
main='Histogram of Ozone Level')
})
x<-airquality$Ozone
x<-na.omit(x)
bins<- seq(min(x),max(x),length.out=input$bins+1)
x
#######################################
# Building a Interactive Histogram App
#######################################
library(shiny)
data(airquality)
# Define UI for app that draws a histogram ----
ui <- fluidPage(
# App title ----
titlePanel("Ozone level!"),
# Sidebar layout with input and output definitions ----
sidebarLayout(
# Sidebar panel for inputs ----
sidebarPanel(
# Input: Slider for the number of bins ----
sliderInput(inputId = "bins",
label = "Number of bins:",
min = 1,
max = 50,
value = 30)
),
# Main panel for displaying outputs ----
mainPanel(
# Output: Histogram ----
plotOutput(outputId = "distPlot")
)
)
)
# Define server logic required to draw a histogram ----
server <- function(input, output) {
output$distPlot <- renderPlot({
x    <- airquality$Ozone
x    <- na.omit(x)
bins <- seq(min(x), max(x), length.out = input$bins + 1)
hist(x, breaks = bins, col = "#75AADB", border = "black",
xlab = "Ozone level",
main = "Histogram of Ozone level")
})
}
# Create Shiny app ----
shinyApp(ui = ui, server = server)
runApp('D:/dataScience/dataProfessor/rForDataScience/webApps/sampleApp/firstAPP.R')
runApp('D:/dataScience/dataProfessor/rForDataScience/webApps/histogramApp')
# Importing libraries
library(shiny)
library(shinythemes)
library(randomForest)
library(data.table)
library(RCurl)
# reading the data
weather <- read.csv(text = getURL('https://raw.githubusercontent.com/dataprofessor/data/master/weather-weka.csv'))
#modelling
model <- randomForest(play~.,data=weather,ntree=500,mtry=4,importance=T)
df <- data.frame(
Name = c("outlook",
"temperature",
"humidity",
"windy"),
Value = as.character(c("Sunny",
65,
66,
'TRUE')),
stringsAsFactors = FALSE)
df
play <- 'play'
df <- rbind(df,play)
df
transpose(df)
input <- transpose(df)
write.table(input,"input.csv", sep=",", quote = FALSE, row.names = FALSE, col.names = FALSE)
test <- read.csv(paste("input", ".csv", sep=""), header = TRUE)
test
str(test)
test$outlook <- factor(test$outlook, levels = c("overcast", "rainy", "sunny"))
str(test).
str(test)
test
# reading the data
weather <- read.csv(text = getURL('https://raw.githubusercontent.com/dataprofessor/data/master/weather-weka.csv'))
# modelling
model <- randomForest(play~.,data=weather,ntree=500,mtry=4,importance=T)
# Save model to RDS file
saveRDS(model, "model.rds")
setwd("D:/dataScience/dataProfessor/rForDataScience/webApps/webApps.Shiny/dataDrivenApp")
# Save model to RDS file
saveRDS(model, "model.rds")
runApp()
runApp()
runApp()
runApp()
runApp()
runApp('sample.R')
# Importing libraries
library(shiny)
library(shinythemes)
library(randomForest)
library(data.table)
library(RCurl)
# reading the data
weather <- read.csv(text = getURL('https://raw.githubusercontent.com/dataprofessor/data/master/weather-weka.csv'))
# modelling
model <- randomForest(play~.,data=weather,ntree=500,mtry=4,importance=T)
ui <- fluidPage(theme = shinytheme('united'),
headerPanel('Play Golf?'),
sidebarPanel(HTML('<h3>Input Parameters</h3>'),
selectInput('outlook',label = "Outlook:",
choices=list('Sunny'='sunny', "Overcast" = "overcast", "Rainy" = "rainy"),
selected = 'Rainy'),
sliderInput('temperature',"Temperature:",
min=64,max=86,
value=70),
sliderInput('humidity',"Humidity:",
min=65,max=86,
value=90),
selectInput("windy", label = "Windy:",
choices = list("Yes" = "TRUE", "No" = "FALSE"),
selected = "TRUE"),
actionButton('submitbutton','Submit',class='btn btn-primary')),
mainPanel(tags$label(h3('Staus/output')),
verbatimTextOutput('content'),
tableOutput('tabledata')
)
)
# Server Function
server <- function(input,output,session){
datasetInput <- reactive({
df <- data.frame(Name=c('outlook',
'temperature',
'humidity',
'windy'),
Value = as.character(c(input$outlook,
input$temperature,
input$humidity,
input$windy)),
stringsAsFactors = F)
play <- 'play'
df <- rbind(df,play)
input <- transpose
write.table(input,"input.csv", sep=",", quote = FALSE, row.names = FALSE, col.names = FALSE)
test <- read.csv(paste("input", ".csv", sep=""), header = TRUE)
test$outlook <- factor(test$outlook, levels = c("overcast", "rainy", "sunny"))
Output <- data.frame(Prediction=predict(model,test), round(predict(model,test,type="prob"), 3))
print(Output)
})
output$contents <- renderPrint({
if (input$submitbutton>0) {
isolate("Calculation complete.")
} else {
return("Server is ready for calculation.")
}
})
# Prediction results table
output$tabledata <- renderTable({
if (input$submitbutton>0) {
isolate(datasetInput())
}
})
}
####################################
# Create the shiny app             #
####################################
shinyApp(ui = ui, server = server)
ui <- fluidPage(theme = shinytheme('united'),
headerPanel('Play Golf?'),
sidebarPanel(HTML('<h3>Input Parameters</h3>'),
selectInput('outlook',label = "Outlook:",
choices=list('Sunny'='sunny', "Overcast" = "overcast", "Rainy" = "rainy"),
selected = 'Rainy'),
sliderInput('temperature',"Temperature:",
min=64,max=86,
value=70),
sliderInput('humidity',"Humidity:",
min=65,max=86,
value=90),
selectInput("windy", label = "Windy:",
choices = list("Yes" = "TRUE", "No" = "FALSE"),
selected = "TRUE"),
actionButton('submitbutton','Submit',class='btn btn-primary')),
mainPanel(tags$label(h3('Staus/output')),
verbatimTextOutput('content'),
tableOutput('tabledata')
)
)
runApp()
# reading the data
weather <- read.csv(text = getURL('https://raw.githubusercontent.com/dataprofessor/data/master/weather-weka.csv'))
# modelling
model <- randomForest(play~.,data=weather,ntree=500,mtry=4,importance=T)
# Save model to RDS file
saveRDS(model, "model.rds")
datasetInput <- reactive({
df <- data.frame(Name=c('outlook',
'temperature',
'humidity',
'windy'),
Value = as.character(c(input$outlook,
input$temperature,
input$humidity,
input$windy)),
stringsAsFactors = F)
play <- 'play'
df <- rbind(df,play)
input <- transpose
write.table(input,"input.csv", sep=",", quote = FALSE, row.names = FALSE, col.names = FALSE)
test <- read.csv(paste("input", ".csv", sep=""), header = TRUE)
test$outlook <- factor(test$outlook, levels = c("overcast", "rainy", "sunny"))
Output <- data.frame(Prediction=predict(model,test), round(predict(model,test,type="prob"), 3))
print(Output)
})
runApp()
####################################
# Data Professor                   #
# http://youtube.com/dataprofessor #
# http://github.com/dataprofessor  #
####################################
# Import libraries
library(shiny)
library(shinythemes)
library(data.table)
library(RCurl)
library(randomForest)
# Read data
weather <- read.csv(text = getURL("https://raw.githubusercontent.com/dataprofessor/data/master/weather-weka.csv") )
# Build model
model <- randomForest(play ~ ., data = weather, ntree = 500, mtry = 4, importance = TRUE)
# Save model to RDS file
# saveRDS(model, "model.rds")
# Read in the RF model
#model <- readRDS("model.rds")
####################################
# User interface                   #
####################################
ui <- fluidPage(theme = shinytheme("united"),
# Page header
headerPanel('Play Golf?'),
# Input values
sidebarPanel(
HTML("<h3>Input parameters</h3>"),
selectInput("outlook", label = "Outlook:",
choices = list("Sunny" = "sunny", "Overcast" = "overcast", "Rainy" = "rainy"),
selected = "Rainy"),
sliderInput("temperature", "Temperature:",
min = 64, max = 86,
value = 70),
sliderInput("humidity", "Humidity:",
min = 65, max = 96,
value = 90),
selectInput("windy", label = "Windy:",
choices = list("Yes" = "TRUE", "No" = "FALSE"),
selected = "TRUE"),
actionButton("submitbutton", "Submit", class = "btn btn-primary")
),
mainPanel(
tags$label(h3('Status/Output')), # Status/Output Text Box
verbatimTextOutput('contents'),
tableOutput('tabledata') # Prediction results table
)
)
####################################
# Server                           #
####################################
server <- function(input, output, session) {
# Input Data
datasetInput <- reactive({
# outlook,temperature,humidity,windy,play
df <- data.frame(
Name = c("outlook",
"temperature",
"humidity",
"windy"),
Value = as.character(c(input$outlook,
input$temperature,
input$humidity,
input$windy)),
stringsAsFactors = FALSE)
play <- "play"
df <- rbind(df, play)
input <- transpose(df)
write.table(input,"input.csv", sep=",", quote = FALSE, row.names = FALSE, col.names = FALSE)
test <- read.csv(paste("input", ".csv", sep=""), header = TRUE)
test$outlook <- factor(test$outlook, levels = c("overcast", "rainy", "sunny"))
Output <- data.frame(Prediction=predict(model,test), round(predict(model,test,type="prob"), 3))
print(Output)
})
# Status/Output Text Box
output$contents <- renderPrint({
if (input$submitbutton>0) {
isolate("Calculation complete.")
} else {
return("Server is ready for calculation.")
}
})
# Prediction results table
output$tabledata <- renderTable({
if (input$submitbutton>0) {
isolate(datasetInput())
}
})
}
####################################
# Create the shiny app             #
####################################
shinyApp(ui = ui, server = server)
# Read data
weather <- read.csv(text = getURL("https://raw.githubusercontent.com/dataprofessor/data/master/weather-weka.csv") )
# Build model
model <- randomForest(play ~ ., data = weather, ntree = 500, mtry = 4, importance = TRUE)
# reading the data
weather <- read.csv(text = getURL('https://raw.githubusercontent.com/dataprofessor/data/master/weather-weka.csv'))
# modelling
model <- randomForest(play~.,data=weather,ntree=500,mtry=4,importance=T)
df <- data.frame(
Name=c('outlook',
'temperature',
'humidity',
'windy'),
Value = as.character(c(input$outlook,
input$temperature,
input$humidity,
input$windy)),
stringsAsFactors = F)
df <- data.frame(
Name=c('outlook',
'temperature',
'humidity',
'windy'),
Value = as.character(c('sunny',
69,
66,
TRUE)),
stringsAsFactors = F)
df <- data.frame(
Name=c('outlook',
'temperature',
'humidity',
'windy'),
Value = as.character(c('sunny',
69,
66,
TRUE)),
stringsAsFactors = F)
df
play <- 'play'
df <- rbind(df,play)
input <- transpose
write.table(input,"input.csv", sep=",", quote = FALSE, row.names = FALSE, col.names = FALSE)
test <- read.csv(paste("input", ".csv", sep=""), header = TRUE)
test$outlook <- factor(test$outlook, levels = c("overcast", "rainy", "sunny"))
Output <- data.frame(Prediction=predict(model,test), round(predict(model,test,type="prob"), 3))
print(Output)
test
play <- 'play'
df <- rbind(df,play)
input <- transpose
write.table(input,"input.csv", sep=",", quote = FALSE, row.names = FALSE, col.names = FALSE)
test <- read.csv(paste("input", ".csv", sep=""), header = TRUE)
test$outlook <- factor(test$outlook, levels = c("overcast", "rainy", "sunny"))
Output <- data.frame(Prediction=predict(model,test), round(predict(model,test,type="prob"), 3))
print(Output)
test
input()
input
df
df <- data.frame(
Name=c('outlook',
'temperature',
'humidity',
'windy'),
Value = as.character(c('sunny',
69,
66,
TRUE)),
stringsAsFactors = F)
play <- 'play'
df <- rbind(df,play)
input <- transpose
input
input <- transpose(df)
input
write.table(input,"input.csv", sep=",", quote = FALSE, row.names = FALSE, col.names = FALSE)
# Importing libraries
library(shiny)
library(shinythemes)
library(randomForest)
library(data.table)
library(RCurl)
# reading the data
weather <- read.csv(text = getURL('https://raw.githubusercontent.com/dataprofessor/data/master/weather-weka.csv'))
# modelling
model <- randomForest(play~.,data=weather,ntree=500,mtry=4,importance=T)
ui <- fluidPage(theme = shinytheme('united'),
headerPanel('Play Golf?'),
sidebarPanel(HTML('<h3>Input Parameters</h3>'),
selectInput('outlook',label = "Outlook:",
choices=list('Sunny'='sunny', "Overcast" = "overcast", "Rainy" = "rainy"),
selected = 'Rainy'),
sliderInput('temperature',"Temperature:",
min=64,max=86,
value=70),
sliderInput('humidity',"Humidity:",
min=65,max=86,
value=90),
selectInput("windy", label = "Windy:",
choices = list("Yes" = "TRUE", "No" = "FALSE"),
selected = "TRUE"),
actionButton('submitbutton','Submit',class='btn btn-primary')),
mainPanel(tags$label(h3('Status/output')),
verbatimTextOutput('contents'),
tableOutput('tabledata')
)
)
# Server Function
server <- function(input,output,session){
datasetInput <- reactive({
df <- data.frame(
Name=c('outlook',
'temperature',
'humidity',
'windy'),
Value = as.character(c(input$outlook,
input$temperature,
input$humidity,
input$windy)),
stringsAsFactors = F)
play <- 'play'
df <- rbind(df,play)
input <- transpose(df)
write.table(input,"input.csv", sep=",", quote = FALSE, row.names = FALSE, col.names = FALSE)
test <- read.csv(paste("input", ".csv", sep=""), header = TRUE)
test$outlook <- factor(test$outlook, levels = c("overcast", "rainy", "sunny"))
Output <- data.frame(Prediction=predict(model,test), round(predict(model,test,type="prob"), 3))
print(Output)
})
output$contents <- renderPrint({
if (input$submitbutton>0) {
isolate("Calculation complete.")
} else {
return("Server is ready for calculation.")
}
})
# Prediction results table
output$tabledata <- renderTable({
if (input$submitbutton>0) {
isolate(datasetInput())
}
})
}
####################################
# Create the shiny app             #
####################################
shinyApp(ui = ui, server = server)
# Save model to RDS file
saveRDS(model, "model.rds")
setwd("D:/dataScience/dataProfessor/rForDataScience/webApps/webApps.Shiny/firstMLApp")
# loading Libraries
library(RCurl)
library(randomForest)
library(caret)
data("iris")
# Perform random splitting of the data set
trainingIndexes <- createDataPartition(iris,p=0.8,list=F)
# Perform random splitting of the data set
trainingIndexes <- createDataPartition(iris$Species,p=0.8,list=F)
testData <- iris[-trainingIndexes,]
model <- randomForest(Species~.,data=trainingSet,ntree=500,mtry=4,importance=T)
trainingSet <- iris[trainingIndexes,]
testData <- iris[-trainingIndexes,]
model <- randomForest(Species~.,data=trainingSet,ntree=500,mtry=4,importance=T)
saveRDS(model,'model.rds')
# Loading the libraries
library(shiny)
runApp()
runApp()
runApp()
runApp()
